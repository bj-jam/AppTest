1、Uri uri = Uri.parse(录音文件网络链接); MediaPlayer.create(this, uri);
2、邮箱正则String check = "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
3、密码由6-16个字符组成，可使用数字、英文字母、下划线 区分大小 String check = "^[0-9A-Za-z_]{6,20}$";

7、timer.schedule(new MyTask(),long time1,long timer2);
	第一个参数，是 TimerTask 类，在包：import java.util.TimerTask .使用者要继承该类，并实现 public void run() 方法，因为 TimerTask 类 实现了 Runnable 接口。
	第二个参数的意思是，当你调用该方法后，该方法必然会调用 TimerTask 类 TimerTask 类 中的 run() 方法，这个参数就是这两者之间的差值，转换成汉语的意思就是说，用户调用 schedule() 方法后，要等待这么长的时间才可以第一次执行 run() 方法。
	第三个参数的意思就是，第一次调用之后，从第二次开始每隔多长的时间调用一次 run() 方法。
8、indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置
9、PendingIntent 			可以看作是对intent的包装，通常通过getActivity,getBroadcast,getService来得到pendingintent的实例，当前activity并不能马上启动它所包含的intent,而是在外部执行 				pendingintent时，调用intent的。正由于pendingintent中 保存有当前App的Context，使它赋予外部App一种能力，使得外部App可以如同当前App一样的执行pendingintent里的 Intent， 就算在执行时当前App已经不存在了，也能通过存在pendingintent里的Context照样执行Intent。另外还可以处理intent执行后的操作。常和alermanger 和notificationmanager一起使用。

11、Html.fromhtml方法，意思是可以将比如文本框中的字符串进行HTML格式化，
	String text = chatUser.getNick().toString()+ "<font color=#ff00ff>[老师]</font>";
		tx.setText(Html.fromHtml(text));设置颜色

	<--签到方式：%1$s定位签到%2$s，学生参 -->  这种字符串可以直接用getString（）把<--定位签到-->颜色改变
	Html.fromHtml(getResources().getString(R.string.map_sign_instruction, "<font color=#17B592>","</font>"))

	<--到方式：?1??定位签到?2??，学生 -->  这种字符串可以直接用getString（）把<--定位签到-->颜色改变
	Html.fromHtml(getResources().getString(R.string.map_sign_instruction).replace("?1??", "<font color=#17B592>").replace("?2??", "</font>"))

12、^([+][8][6]([ ]|[-])?)?[1][3-8][0-9]([ ]?|[-]?)[0-9]{4}([ ]?|[-]?)\\d{4}$  手机号码正则,\\D匹配非数字的字符
13、overridePendingTransition(R.anim.down_to_up,R.anim.down_to_up1)两个activity间的跳转动画
14、Map对象，使用keySet()方法获取所有的key值
	遍历map集合
	for (Map.Entry<String, CourseDto> entry : courseDtos.entrySet()){
		CourseDto s = entry.getValue();
		LiveDto liveDto = new LiveDto();
		liveDto.setLiveId(Long.valueOf(s.getId()));// 直播ID
		liveDto.setLiveName(s.getCourseName());// 直播名字
	}
15、启动android默认浏览器
    Intent intent= new Intent();
    intent.setAction("android.intent.action.VIEW");
    Uri content_url = Uri.parse("http://www.cnblogs.com");
    intent.setData(content_url);
    startActivity(intent);
	启动安卓自带浏览器
	Intent intent= new Intent();
	intent.setAction("android.intent.action.VIEW");
	Uri content_url = Uri.parse("http://www.cnblogs.com");
	intent.setData(content_url);
	intent.setClassName("com.android.browser","com.android.browser.BrowserActivity");
	startActivity(intent);

	uc浏览器"："com.uc.browser", "com.uc.browser.ActivityUpdate“
	opera ："com.opera.mini.android", "com.opera.mini.android.Browser"
	qq浏览器："com.tencent.mtt", "com.tencent.mtt.MainActivity"

21、根据包名获取Resources themeResources = packageManager.getResourcesForApplication(themePackageName);
	根据包名获取上下文Context configContext = context.createPackageContext(“com.newmine.settings”, Context.CONTEXT_IGNORE_SECURITY);
	获取资源的id indentify = themeResources.getIdentifier("themepreview", "drawable", themePackageName);
	根据id和Resources 获取bitmap  bitmap = BitmapFactory.decodeResource(themeResources, indentify);
	获取系统当前时间（毫秒为单位）System.currentTimeMillis();返回一个long类型的数值
22、根据包名强制转换上下文mContext = ((Context) context).createPackageContext("com.nbbsw.theme", 0);
23、判断是否为WiFi状态返回boolean值
	public static boolean isWifiNetwork(Context context) {
		return isNetworkAvailable(context) && (ConnectivityManager.TYPE_WIFI == getNetworkType(context));
	}

	public static int getNetworkType(Context context) {
		ConnectivityManager connectivity = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		if (connectivity == null) {

		} else {
			NetworkInfo[] info = connectivity.getAllNetworkInfo();
			if (info != null) {
				for (int i = 0; i < info.length; i++) {
					if (info[i].getState() == NetworkInfo.State.CONNECTED) {

						return info[i].getType();
					}
				}
			}
		}
		return -1;
	}

	public static boolean isNetworkAvailable(Context context) {
		ConnectivityManager connectivity = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		if (connectivity == null) {
		} else {
			NetworkInfo[] info = connectivity.getAllNetworkInfo();
			if (info != null) {
				for (int i = 0; i < info.length; i++) {
					if (info[i].getState() == NetworkInfo.State.CONNECTED) {
						return true;
					}
				}
			}
		}
		return false;
	}
24、通过包名设置壁纸：
	public static void setBirdWallpaper(Context context, String packageName) {
        try {
            InputStream open = getThemeRes(context, packageName).getAssets().open(EFResourcesConfig.BIRD_THEME_WALLPAPER);
            WallpaperManager wManager = (WallpaperManager) context.getSystemService(Context.WALLPAPER_SERVICE);
            wManager.setStream(open);
            open.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    };

    public static  Resources getThemeRes(Context context, String packageName) {
        PackageManager pm = context.getPackageManager();
        try {
            return pm.getResourcesForApplication(packageName);
        } catch (NameNotFoundException e1) {
            e1.printStackTrace();
        }
        return null;
    }
	);

26、时间和时间戳的相互转化
	String time = "2010年12月08日11时17分00秒";
	// 字符串=======>时间戳
	String re_str = getTime(time);
	// 时间戳======>字符串
	String data = getStrTime(re_str);
	// 将字符串转为时间戳
	public static String getTime(String user_time) {
		String re_time = null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日HH时mm分ss秒");
		Date d;
		try {

			d = sdf.parse(user_time);
			long l = d.getTime();
			String str = String.valueOf(l);
			re_time = str.substring(0, 10);

		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return re_time;
	}
	// 将时间戳转为字符串
	public static String getStrTime(String cc_time) {
		String re_StrTime = null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日HH时mm分ss秒");
		// 例如：cc_time=1291778220
		long lcc_time = Long.valueOf(cc_time);
		re_StrTime = sdf.format(new Date(lcc_time * 1000L));
		return re_StrTime;
	}

28、if (pageNo++ == 0) {  先做判断然后做++
30、Bundle bundle = new Bundle();
				// 文件ID
	bundle.putLong("fileId", baseObject.getLong("fileId"));
	msg.setData(bundle);

	Bundle bundle = msg.getData();
	Long l = bundle.getLong("fileId");

	配合使用

	baseObject.getLong("fileId")  如果json对象中的fileId字段不存在  这是会抛异常org.json.JSONException: No value for fileId
	这时可以用baseObject.optLong("fileId")来获取，如果json对象中的fileId字段不存在自动返回0，如果是字符串自动返回null;
	也可以用baseObject.isNull("fileId")判断json对象中的fileId字段是否存在
31、Collections.reverse(), list集合顺序颠倒
			按时间排序
			Collections.sort(list, new Comparator<MyCourse>() {
				@Override
				public int compare(MyCourse lhs, MyCourse rhs) {
					Date date1 = getTime(lhs.recruitSTime);
					Date date2 = getTime(rhs.recruitSTime);
					// 对日期字段进行升序，如果欲降序可采用after方法
					if (date1.before(date2)) {
						return 1;
					}
					return -1;
				}
			});

32、studyLineView.postInvalidate();可以异步自动更新View

33、/** 第一种方式：去到了拨号界面，但是实际的拨号是由用户点击实现的 */
		Intent intent = new Intent(Intent.ACTION_DIAL);
		Uri data = Uri.parse("tel:" + phoneNum);
		intent.setData(data);
		startActivity(intent);

		/**
		 * 第二种方式：直接拨打了你所输入的号码，所以这种方式对于用户没有直接的提示效果，Android推荐使用第一种方式，如果是第二种的话，
		 * 建议在之前加一个提示，是否拨打号码，然后确定后再拨打
		 */
		// Intent intent = new Intent(Intent.ACTION_CALL);
		// Uri data = Uri.parse("tel:" + "135xxxxxxxx");
		// intent.setData(data);
		// startActivity(intent);



34、反射的用法，大于20是反射内部类里面的私有属性和方法。Filed  属性
	if (android.os.Build.VERSION.SDK_INT > 20) {
		Field mDelegateField = dp.getClass().getDeclaredField("mDelegate");
		mDelegateField.setAccessible(true);

		Object mDelegateObj = mDelegateField.get(dp);// DatePickerSpinnerDelegate
		Class<?> mDelegateCls = mDelegateObj.getClass();
		Field dayFile = mDelegateCls.getDeclaredField("mDaySpinner");
		dayFile.setAccessible(true);

		Object dayObj = dayFile.get(mDelegateObj);// NumberPicker
		Class<?> dayCls = dayObj.getClass();
		Method dayMethod = dayCls.getMethod("setVisibility", int.class);
		dayMethod.invoke(dayObj, View.GONE);
	} else {
		Field daySpinner = dp.getClass().getDeclaredField("mDaySpinner");
		daySpinner.setAccessible(true);
		((View) daySpinner.get(dp)).setVisibility(View.GONE);
	}
35、利用java反射机制，使用android系统的内部类成员函数

	Context mmsCtx = createPackageContext("com.android.lockscreen", Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
	// android.widget.DatePicker$DatePickerSpinnerDelegate 内部类
	Class<?> maClass = Class.forName("com.android.lockscreen.LockScreenActivity", true, mmsCtx.getClassLoader());

	Object maObject = maClass.newInstance();
	Field f_mPm = maClass.getDeclaredField("TAG");
	f_mPm.setAccessible(true);
    Log.i(LOG_TAG, "___________________________________________obj:"+f_mPm.get(maObject));

　　

	//访问方法
	//访问
		try {
            Context mmsCtx = createPackageContext("com.android.lockscreen",
                    Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
            Class<?> maClass = Class.forName("com.android.lockscreen.LockScreenActivity", true, mmsCtx.getClassLoader());

            Object maObject = maClass.newInstance();
            Field f_mPm = maClass.getDeclaredField("TAG");

            //maClass.getDeclaredMethod("", parameterTypes);
            f_mPm.setAccessible(true);
            Log.i(LOG_TAG, "___________________________________________obj:"+f_mPm.get(maObject));


                Class[] resource = new Class[]{Context.class};
                <span style="color: #ff0000;">Object<span style="background-color: #ffffff;">[]</span></span> resourceObj = new Object[]{mmsCtx};

                Method addsMethod = maClass.getDeclaredMethod("getLockScreenView", resource);
                addsMethod.setAccessible(true);

                View addsResult = (View)addsMethod.invoke(maObject, resourceObj);
                Log.i(LOG_TAG, "___________________________________________addsResult:"+addsResult);

        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

	//定义被访问

	public class LockScreenActivity extends Activity {

    private String TAG = "LockScreenActivity";
    //private LockScreen mScreen = new LockScreen(LockScreenActivity.this);

    private LockScreen getLockScreenView(Context context){

        Log.i(TAG, "_________________________________________context:"+context);
        return new LockScreen(context);
    }

	}

　　

	//获取setting包的的Context
            Context mmsCtx = createPackageContext("com.android.settings",
                    Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
            //使用setting的classloader加载com.android.settings.ManageApplications类
            Class<?> maClass = Class.forName("com.android.settings.ManageApplications", true, mmsCtx.getClassLoader());
            //创建它的一个对象
            Object maObject = maClass.newInstance();

            /*
             * 将私有域mPm赋值。因为mPm在SizeObserver的invokeGetSize中用到了，
             * 却因为没有执行onCreate而没有初始化，所以要在此处初始化。
             */
            Field f_mPm = maClass.getDeclaredField("mPm");
            f_mPm.setAccessible(true);
            f_mPm.set(maObject, mmsCtx.getPackageManager());


37、如下设置后如果textView的能容太多，就会有滚动功能
	tv.setMovementMethod(new ScrollingMovementMethod());
	tv.setMovementMethod(ScrollingMovementMethod
						.getInstance());

38、IllegalArgumentException此异常表明向方法传递了一个不合法或不正确的参数。你看看传值的方法是否参数不正确
	java.lang.IllegalStateException  状态异常, 该异常表示，当前对客户端的响应已经结束，不能在响应已经结束（或说消亡）后再向客户端（实际上是缓冲区）输出任何内容。
	java.lang.SecurityException: 权限拒绝： 开始的意图

	遇到java.util.concurrent.RejectedExecutionException
	目前看来，最主要有2种原因。
	第一：你的线程池ThreadPoolExecutor 显示的shutdown()之后，再向线程池提交任务的时候。 如果你配置的拒绝策略是AbortPolicy的话，这个异常就会抛出来。
	第二：当你设置的任务缓存队列过小的时候，或者说， 你的线程池里面所有的线程都在干活（线程数== maxPoolSize),并且你的任务缓存队列也已经充满了等待的队列， 这个时候，你再向它提交任务，则会抛出这个异常。


40、bitmap 也可以通过Bundle传递的，使用putParacelable就可

41、关于Fragment（XXFragment） not attached to Activity 异常。出现该异常，是因为Fragment的还没有Attach到Activity时，调用了如getResource()等，需要上下文Content的函数。解决方法，就是等将调用的代码写在OnStart（）中,调用前也可以进行一个判断isAdded()。
   关于java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState分析原因：你并不需要系统保存的参数，只要你自己设置的参数能够传递过去，在另外一个Fragment里能够顺利接受就行了，现在android里提供了另外一种形式的提交方式commitAllowingStateLoss()，从名字上就能看出，这种提交是允许状态值丢失的。到此问题得到完美解决，值的传递是你自己控制的。
这里也说一下另外一个问题，bitmap 也可以通过Bundle传递的，使用putParacelable就可以了

42、接口汉字乱码问题string =new String(request.getParameter("string").getBytes("iso8859-1"));

	ResponseBody
	@RequestMapping("getString")
	public void getString(HttpServletRequest request,
			@RequestParam("string") String string) {

		try {
			string =new String(request.getParameter("string").getBytes("iso8859-1"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(string);
	}
42、Math.abs()取绝对值
	Math.ceil(x)返回大于参数x的最小整数,即对浮点数向上取整
43、jit的使用：
	1、安装完成后，进入到要托管的项目根目录，启动Git Bash命令行
	2、输入git  clone  接着将先前记录下来的地址复制到后面，回车
	3、将下载下来的项目文件夹的所有文件及文件夹，包括.git文件夹在内，全部拷贝到你的托管项目的根目录（或者将你的托管项目拷贝到该目录）
	输入cd test(test clone 下的文件名)
	进入到该托管项目的根目录。
	4、输入git add .  将改动的地方添加到版本管理器
	5.输入git  commit -m "更改内容"  提交到本地的版本控制库里，引号里面是你对本次提交的说明信息。
	6最后输入git push -u origin master  将你本地的仓库提交到你的github账号里，
	此时会要求你输入你的github的账号和密码（密码输入时不会再git bash上显示的，只要正确输入按回车就可）
44、objectanimator.offloat 第二个参数
	translationX，translationY平移
	scaleX，scaleY缩放
	rotationX，rotationY旋转
	alpha透明度
	SharedPreferences
45、SharedPreferences获取所有内容
	/** 获取批阅缓存的信息 */
	public Map<String, ?> getAllReadOver() {
		if (context == null) {
			return null;
		}
		return getSharedPreferences(FileKey.READOVER_VALUE.toString()).getAll();
	}

	Map<String, ?> map = LocalCache.getInstance().getAllReadOver();
		if (map != null && map.size() > 0) {
			String param = "";
			for (String key : map.keySet()) {
				param += LocalCache.getInstance().getCache(
						FileKey.READOVER_VALUE, key)
						+ ";";
			}
			hashMap.put("itemParams", param.substring(0, param.length() - 1));// 评语评分-提交内容
		}
46、广播是系统级别的，如果不同的应用注册了同一个广播，当有这个广播发出时，所有的应用都会执行这个广播的动作
	ListView的属性
	 android: transcriptMode属性： 设置列表的 transcriptMode模式，该模式指定列表 添加新的选项的时候，是否自动滑动到底部，显示新的选项。

     disabled：取消transcriptMode模式，默认的

     normal：当接受到数据集合改变的通知，并且仅仅当最后一个选项已经显示在屏幕的时候，自动滑动到底部 。

     alwaysScroll：无论当前列表显示什么选项，列表将会自动滑动到底部显示最新的选项 。

47、// 设置View可以缓存
		// shareView.setDrawingCacheEnabled(true);
		// // 创建二维码的bitmap
		// Bitmap bmp = Bitmap.createBitmap(shareView.getDrawingCache());
		// shareView.setDrawingCacheEnabled(false);
		// if (bmp == null) {
		// showToast("分享失败");
		// return;
		// }
48、服务器可以获取从什么设备调用的接口
	public int checkAgent(HttpServletRequest request) {
		Enumeration<String> em = request.getHeaderNames();
		while (em.hasMoreElements()) {
			String name = (String) em.nextElement();
			String value = request.getHeader(name);
			if ("user-agent".equals(name)) {
				// 网页、ios、
				if (value.contains("Windows") || value.contains("iPhone") || value.contains("Mac")) {
					return 0;
				}
			}
		}
		return 1;
	}
49、判断当前应用程序处于前台还是后台，必须在AndroidManifest.xml中添加<uses-permission android:name="android.permission.GET_TASKS" />权限

	public static boolean isBackground(final Context context) {
		ActivityManager am = (ActivityManager) context
				.getSystemService(Context.ACTIVITY_SERVICE);
		List<RunningTaskInfo> tasks = am.getRunningTasks(1);
		if (!tasks.isEmpty()) {
			ComponentName topActivity = tasks.get(0).topActivity;
			if (!topActivity.getPackageName()
					.equals(context.getPackageName())) {
				return true;
			}
		}
		return false;
	}



	/**
	 *
	 * 检测某ActivityUpdate是否在当前Task的栈顶
	 *
	 */

	public boolean isTopActivy(Context context, String cmdName) {
		ActivityManager manager = (ActivityManager) context
				.getSystemService(Context.ACTIVITY_SERVICE);
		List<RunningTaskInfo> runningTaskInfos = manager.getRunningTasks(1);
		String cmpNameTemp = null;

		if (null != runningTaskInfos) {
			cmpNameTemp = runningTaskInfos.get(0).topActivity.toString();
			Log.e("jam", "cmpname:" + cmpNameTemp);
		}
		if (null == cmpNameTemp)
			return false;
		return cmpNameTemp.equals(cmdName);

	}

50、private void startResultTime() {
		closeResultTime();
		if (timer2 == null) {
			timer2 = new Timer();
		}
		if (timerTask2 == null) {
			timerTask2 = new TimerTask() {
				@Override
				public void run() {
					getProblemLocal(index);
				}
			};
		}
		timer2.schedule(timerTask2, 10 * 1000, 20 * 1000);
	}

	private void closeResultTime() {
		if (timer2 != null) {
			timer2.cancel();
			timer2 = null;
		}
		if (timerTask2 != null) {
			timerTask2.cancel();
			timerTask2 = null;
		}
	}
51、webView的用法
		// 放大缩小按钮
		webView.getSettings().setBuiltInZoomControls(false);
		// 使Webview具有标准视口(如普通桌面浏览器)
		webView.getSettings().setUseWideViewPort(true);
		// 能够执行Javascript脚本
		webView.getSettings().setJavaScriptEnabled(true);
		webView.getSettings().setDefaultTextEncodingName("utf-8");
		// 添加JS交互接口类
		webView.addJavascriptInterface(new AppWebView(), "appWebView");
		// 当前webview中跳转
		webView.setWebViewClient(new WebViewClient());
		webView.setWebChromeClient(new WebChromeClient() {
			// 只有确定按钮的提示框
			@Override
			public boolean onJsAlert(WebView view, String url, String message,
					final JsResult result) {
			};
			// 有确定、取消、忽略
			@Override
			public boolean onJsPrompt(WebView view, String url, String message, String defaultValue,
					JsPromptResult result) {
				// TODO Auto-generated method stub
				return super.onJsPrompt(view, url, message, defaultValue, result);
			}
			// 有确定、取消按钮的提示框
			@Override
			public boolean onJsConfirm(WebView view, String url,
					String message, final JsResult result) {
				new MyAlertDialog.Builder(CreditCourseActivity.this)
						// .setTitle(url)
						.setMessage(message)
						.setPositiveButton(R.string.check,
								new AlertDialog.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int which) {
										result.confirm();
									}
								})
						.setNegativeButton(R.string.cancel,
								new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int which) {
										result.cancel();
									}
								}).setCancelable(false).create().show();
				return true;
			};

		});
		if ((keyCode == KeyEvent.KEYCODE_BACK) && webView.canGoBack()) {
			webView.goBack(); // goBack()表示返回WebView的上一页面
			return true;
		}


		/** 清除cookie */
	private void removeAllCookie() {
		CookieSyncManager cookieSyncManager = CookieSyncManager
				.createInstance(this);
		CookieManager cookieManager = CookieManager.getInstance();
		cookieManager.setAcceptCookie(true);
		cookieManager.removeSessionCookie();
		cookieManager.removeAllCookie();
		cookieSyncManager.sync();
	}
52、  * 判断手机是否有root权限
     */
    private static boolean hasRootPerssion(){
        PrintWriter PrintWriter = null;
        Process process = null;
        try {
            process = Runtime.getRuntime().exec("su");
            PrintWriter = new PrintWriter(process.getOutputStream());
            PrintWriter.flush();
            PrintWriter.close();
            int value = process.waitFor();
            return returnResult(value);
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
            if(process!=null){
                process.destroy();
            }
        }
        return false;
    }
53、//服务器判断请求数据的设备类型
	public int checkAgent(HttpServletRequest request) {
		Enumeration<String> em = request.getHeaderNames();
		while (em.hasMoreElements()) {
			String name = (String) em.nextElement();
			String value = request.getHeader(name);
			if ("user-agent".equals(name)) {
				// 网页、ios、
				if (value.contains("Windows") || value.contains("iPhone") || value.contains("Mac")) {
					return 0;
				}
			}
		}
		return 1;
	}

	53.1. 获得客户机信息
    getRequestURL方法返回客户端发出请求时的完整URL。
    getRequestURI方法返回请求行中的资源名部分。
    getQueryString 方法返回请求行中的参数部分。
    getRemoteAddr方法返回发出请求的客户机的IP地址
    getRemoteHost方法返回发出请求的客户机的完整主机名
    getRemotePort方法返回客户机所使用的网络端口号
    getLocalAddr方法返回WEB服务器的IP地址。
    getLocalName方法返回WEB服务器的主机名
    getMethod得到客户机请求方式

 	53.2.获得客户机请求头
    getHeader(string name)方法
    getHeaders(String name)方法
    getHeaderNames方法

 	53.3. 获得客户机请求参数(客户端提交的数据)
    getParameter(name)方法
    getParameterValues（String name）方法
    getParameterNames方法
    getParameterMap方法
54、获取系统语言context.getResources().getConfiguration().locale.getLanguage()
	返回zh、en
55、数组和结合互转：
	集合转成数组
	List<String> list = new ArrayList<String>();
	list.add("a1");
	list.add("a2");
	String[] toBeStored = list.toArray(new String[list.size()]);
	for(String s : toBeStored) {
     	System.out.println(s);
	}
	数组转成集合
	String[] arr = new String[] {"1", "2"};
    List list = Arrays.asList(arr);
56、 BitmapFactory.Options这个类，有一个字段叫做 inJustDecodeBounds 。SDK中对这个成员的说明是这样的：
	If set to true, the decoder will return null (no bitmap), but the out⋯
	也就是说，如果我们把它设为true，那么BitmapFactory.decodeFile(String path, Options opt)并不会真的返回一个Bitmap给你，它仅仅会把它的宽，高取回来给你，这样就不会占用太多的内存，也就不会那么频繁的发生OOM了。
	示例代码如下：
	BitmapFactory.Options options = new BitmapFactory.Options();
	options.inJustDecodeBounds = true;
	Bitmap bmp = BitmapFactory.decodeFile(path, options);/* 这里返回的bmp是null */
	这段代码之后，options.outWidth 和 options.outHeight就是我们想要的宽和高了。

	比如我们需要在图片不变形的前提下得到宽度为200的缩略图。
	那么我们需要先计算一下缩放之后，图片的高度是多少 ,代码如下
	int height = options.outHeight * 200 / options.outWidth;
	options.outWidth = 200；
	options.outHeight = height;
	options.inJustDecodeBounds = false;
	Bitmap bmp = BitmapFactory.decodeFile(path, options);
	image.setImageBitmap(bmp);

	这样虽然我们可以得到我们期望大小的ImageView
	但是在执行BitmapFactory.decodeFile(path, options);时，并没有节约内存。要想节约内存，还需要用到BitmapFactory.Options这个类里的  inSampleSize  这个成员变量。
	我们可以根据图片实际的宽高和我们期望的宽高来计算得到这个值。
	options.inSampleSize = options.outWidth / 200; /*图片长宽方向缩小倍数*/
	另外，为了节约内存我们还可以使用下面的几个字段：
	options.inDither=false;    /*不进行图片抖动处理*/
	options.inPreferredConfig=null;  /*设置让解码器以最佳方式解码*/
	/* 下面两个字段需要组合使用 */
	options.inPurgeable = true;
	options.inInputShareable = true;

	// 允许可清除
	如果 inPurgeable 设为True的话表示使用BitmapFactory创建的Bitmap用于存储Pixel的内存空间在系统内存不足时可以被回收，
	在应用需要再次访问Bitmap的Pixel时（如绘制Bitmap或是调用getPixel），系统会再次调用BitmapFactory decoder重新生成Bitmap的Pixel数组.
	为了能够重新解码图像，bitmap要能够访问存储Bitmap的原始数据.在inPurgeable为false时表示创建的Bitmap的Pixel内存空间不能被回收，
	这样BitmapFactory在不停decodeByteArray创建新的Bitmap对象，不同设备的内存不同，因此能够同时创建的Bitmap个数可能有所不同，
	200个bitmap足以使大部分的设备重新OutOfMemory错误.当isPurgable设为true时，系统中内存不足时，可以回收部分Bitmap占据的内存空间，
	这时一般不会出现OutOfMemory 错误.
57、static boolean isMain() {
    return Looper.getMainLooper().getThread() == Thread.currentThread();
  }

58、关于画笔的设置
	Paint即画笔，在绘图过程中起到了极其重要的作用，画笔主要保存了颜色，
         样式等绘制信息，指定了如何绘制文本和图形，画笔对象有很多设置方法，
         大体上可以分为两类，一类与图形绘制相关，一类与文本绘制相关。
     	 <strong><span style="color: #800000; font-size: small;">1.图形绘制  </span></strong>
        1、setARGB(int a,int r,int g,int b);
         	设置绘制的颜色，a代表透明度，r，g，b代表颜色值。
        2、 setAlpha(int a);
         	设置绘制图形的透明度。
        3、 setColor(int color);
         	设置绘制的颜色，使用颜色值来表示，该颜色值包括透明度和RGB颜色。
       	4、setAntiAlias(boolean aa);
         	设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢。
        5、   setDither(boolean dither);
          	 设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰
        6、  setFilterBitmap(boolean filter);
           	如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作，加快显示速度，本设置项依赖于dither和xfermode的设置
        7、  setMaskFilter(MaskFilter maskfilter);
           	设置MaskFilter，可以用不同的MaskFilter实现滤镜的效果，如滤化，立体等
        8、  setColorFilter(ColorFilter colorfilter);
           	设置颜色过滤器，可以在绘制颜色时实现不用颜色的变换效果
        9、  setPathEffect(PathEffect effect);
           	设置绘制路径的效果，如点画线等
        10、   setShader(Shader shader);
          	 设置图像效果，使用Shader可以绘制出各种渐变效果
        11、   setShadowLayer(float radius ,float dx,float dy,int color);
           	在图形下面设置阴影层，产生阴影效果，radius为阴影的角度，dx和dy为阴影在x轴和y轴上的距离，color为阴影的颜色
        12、   setStyle(Paint.Style style);
           	设置画笔的样式，为FILL，FILL_OR_STROKE，或STROKE
        13、   setStrokeCap(Paint.Cap cap);
           	当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的图形样式，如圆形样式    Cap.ROUND,或方形样式Cap.SQUARE
        14、   setSrokeJoin(Paint.Join join);
           	设置绘制时各图形的结合方式，如平滑效果等
        15、   setStrokeWidth(float width);
           	当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的粗细度
        16、   setXfermode(Xfermode xfermode);
           	设置图形重叠时的处理方式，如合并，取交集或并集，经常用来制作橡皮的擦除效果
          <span style="color: #800000; font-size: small;"><strong> 2.文本绘制  </strong></span>
        17、   setFakeBoldText(boolean fakeBoldText);
           	模拟实现粗体文字，设置在小字体上效果会非常差
        18、   setSubpixelText(boolean subpixelText);
           	设置该项为true，将有助于文本在LCD屏幕上的显示效果
        19、   setTextAlign(Paint.Align align);
           	设置绘制文字的对齐方向
      	20、   setTextScaleX(float scaleX);
           	设置绘制文字x轴的缩放比例，可以实现文字的拉伸的效果
        21、   setTextSize(float textSize);
          	 设置绘制文字的字号大小
        22、   setTextSkewX(float skewX);
           	设置斜体文字，skewX为倾斜弧度
        23、   setTypeface(Typeface typeface);
           	设置Typeface对象，即字体风格，包括粗体，斜体以及衬线体，非衬线体等
        24、   setUnderlineText(boolean underlineText);
           	设置带有下划线的文字效果
        25、   setStrikeThruText(boolean strikeThruText);
           	设置带有删除线的效果
59、缓存相关
	1、通过Context.getExternalFilesDir()方法可以获取到 SDCard/Android/data/你的应用的包名/files/ 目录，一般放一些长时间保存的数据
	2、通过Context.getExternalCacheDir()方法可以获取到 SDCard/Android/data/你的应用包名/cache/目录，一般存放临时缓存数据
60、1、只需在根节点设置Android:clipChildren为false即可，默认为true，注意：一定是在布局文件的根节点设置，否则不起作用
    2、可以通过android:layout_gravity控制超出的部分如何显示
    3、android:clipChildren的意思：是否限制子View在其范围内，我们将其值设置为false后那么当子控件的高度高于父控件时也会完全显示,而不会被压缩
61、 /**
        * 获取状态栏的高度
        *
        * @return
        */
       public int getStatusBarHeight() {
           int result = 0;
           int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
           if (resourceId > 0) {
               result = getResources().getDimensionPixelSize(resourceId);
           }
           return result;
       }
	   
	   
	   
62、/**
     * 弹起软键盘
     *
     * @param editText
     */
    public void openKeyBoard(final EditText editText) {
        editText.setFocusable(true);
        editText.setFocusableInTouchMode(true);
        editText.requestFocus();
        AndroidSchedulers.mainThread().createWorker().schedule(new Runnable() {
            @Override
            public void run() {
                InputMethodManager imm = (InputMethodManager) editText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.showSoftInput(editText, 0);
            }
        }, 200, TimeUnit.MILLISECONDS);
    }