1、Uri uri = Uri.parse(录音文件网络链接); MediaPlayer.create(this, uri);
2、邮箱正则String check = "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
3、密码由6-16个字符组成，可使用数字、英文字母、下划线 区分大小 String check = "^[0-9A-Za-z_]{6,20}$";

7、timer.schedule(new MyTask(),long time1,long timer2);
	第一个参数，是 TimerTask 类，在包：import java.util.TimerTask .使用者要继承该类，并实现 public void run() 方法，因为 TimerTask 类 实现了 Runnable 接口。
	第二个参数的意思是，当你调用该方法后，该方法必然会调用 TimerTask 类 TimerTask 类 中的 run() 方法，这个参数就是这两者之间的差值，转换成汉语的意思就是说，用户调用 schedule() 方法后，要等待这么长的时间才可以第一次执行 run() 方法。
	第三个参数的意思就是，第一次调用之后，从第二次开始每隔多长的时间调用一次 run() 方法。
8、indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置
9、PendingIntent 			可以看作是对intent的包装，通常通过getActivity,getBroadcast,getService来得到pendingintent的实例，当前activity并不能马上启动它所包含的intent,而是在外部执行 				pendingintent时，调用intent的。正由于pendingintent中 保存有当前App的Context，使它赋予外部App一种能力，使得外部App可以如同当前App一样的执行pendingintent里的 Intent， 就算在执行时当前App已经不存在了，也能通过存在pendingintent里的Context照样执行Intent。另外还可以处理intent执行后的操作。常和alermanger 和notificationmanager一起使用。

11、Html.fromhtml方法，意思是可以将比如文本框中的字符串进行HTML格式化，
	String text = chatUser.getNick().toString()+ "<font color=#ff00ff>[老师]</font>";
		tx.setText(Html.fromHtml(text));设置颜色

	<--签到方式：%1$s定位签到%2$s，学生参 -->  这种字符串可以直接用getString（）把<--定位签到-->颜色改变
	Html.fromHtml(getResources().getString(R.string.map_sign_instruction, "<font color=#17B592>","</font>"))

	<--到方式：?1??定位签到?2??，学生 -->  这种字符串可以直接用getString（）把<--定位签到-->颜色改变
	Html.fromHtml(getResources().getString(R.string.map_sign_instruction).replace("?1??", "<font color=#17B592>").replace("?2??", "</font>"))

12、^([+][8][6]([ ]|[-])?)?[1][3-8][0-9]([ ]?|[-]?)[0-9]{4}([ ]?|[-]?)\\d{4}$  手机号码正则,\\D匹配非数字的字符
13、overridePendingTransition(R.anim.down_to_up,R.anim.down_to_up1)两个activity间的跳转动画
14、Map对象，使用keySet()方法获取所有的key值
	遍历map集合
	for (Map.Entry<String, CourseDto> entry : courseDtos.entrySet()){
		CourseDto s = entry.getValue();
		LiveDto liveDto = new LiveDto();
		liveDto.setLiveId(Long.valueOf(s.getId()));// 直播ID
		liveDto.setLiveName(s.getCourseName());// 直播名字
	}
15、启动android默认浏览器
    Intent intent= new Intent();
    intent.setAction("android.intent.action.VIEW");
    Uri content_url = Uri.parse("http://www.cnblogs.com");
    intent.setData(content_url);
    startActivity(intent);
	启动安卓自带浏览器
	Intent intent= new Intent();
	intent.setAction("android.intent.action.VIEW");
	Uri content_url = Uri.parse("http://www.cnblogs.com");
	intent.setData(content_url);
	intent.setClassName("com.android.browser","com.android.browser.BrowserActivity");
	startActivity(intent);

	uc浏览器"："com.uc.browser", "com.uc.browser.ActivityUpdate“
	opera ："com.opera.mini.android", "com.opera.mini.android.Browser"
	qq浏览器："com.tencent.mtt", "com.tencent.mtt.MainActivity"

21、根据包名获取Resources themeResources = packageManager.getResourcesForApplication(themePackageName);
	根据包名获取上下文Context configContext = context.createPackageContext(“com.newmine.settings”, Context.CONTEXT_IGNORE_SECURITY);
	获取资源的id indentify = themeResources.getIdentifier("themepreview", "drawable", themePackageName);
	根据id和Resources 获取bitmap  bitmap = BitmapFactory.decodeResource(themeResources, indentify);
	获取系统当前时间（毫秒为单位）System.currentTimeMillis();返回一个long类型的数值
22、根据包名强制转换上下文mContext = ((Context) context).createPackageContext("com.nbbsw.theme", 0);
23、判断是否为WiFi状态返回boolean值
	public static boolean isWifiNetwork(Context context) {
		return isNetworkAvailable(context) && (ConnectivityManager.TYPE_WIFI == getNetworkType(context));
	}

	public static int getNetworkType(Context context) {
		ConnectivityManager connectivity = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		if (connectivity == null) {

		} else {
			NetworkInfo[] info = connectivity.getAllNetworkInfo();
			if (info != null) {
				for (int i = 0; i < info.length; i++) {
					if (info[i].getState() == NetworkInfo.State.CONNECTED) {

						return info[i].getType();
					}
				}
			}
		}
		return -1;
	}

	public static boolean isNetworkAvailable(Context context) {
		ConnectivityManager connectivity = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		if (connectivity == null) {
		} else {
			NetworkInfo[] info = connectivity.getAllNetworkInfo();
			if (info != null) {
				for (int i = 0; i < info.length; i++) {
					if (info[i].getState() == NetworkInfo.State.CONNECTED) {
						return true;
					}
				}
			}
		}
		return false;
	}
24、通过包名设置壁纸：
	public static void setBirdWallpaper(Context context, String packageName) {
        try {
            InputStream open = getThemeRes(context, packageName).getAssets().open(EFResourcesConfig.BIRD_THEME_WALLPAPER);
            WallpaperManager wManager = (WallpaperManager) context.getSystemService(Context.WALLPAPER_SERVICE);
            wManager.setStream(open);
            open.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    };

    public static  Resources getThemeRes(Context context, String packageName) {
        PackageManager pm = context.getPackageManager();
        try {
            return pm.getResourcesForApplication(packageName);
        } catch (NameNotFoundException e1) {
            e1.printStackTrace();
        }
        return null;
    }
	);

26、时间和时间戳的相互转化
	String time = "2010年12月08日11时17分00秒";
	// 字符串=======>时间戳
	String re_str = getTime(time);
	// 时间戳======>字符串
	String data = getStrTime(re_str);
	// 将字符串转为时间戳
	public static String getTime(String user_time) {
		String re_time = null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日HH时mm分ss秒");
		Date d;
		try {

			d = sdf.parse(user_time);
			long l = d.getTime();
			String str = String.valueOf(l);
			re_time = str.substring(0, 10);

		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return re_time;
	}
	// 将时间戳转为字符串
	public static String getStrTime(String cc_time) {
		String re_StrTime = null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日HH时mm分ss秒");
		// 例如：cc_time=1291778220
		long lcc_time = Long.valueOf(cc_time);
		re_StrTime = sdf.format(new Date(lcc_time * 1000L));
		return re_StrTime;
	}

28、if (pageNo++ == 0) {  先做判断然后做++
30、Bundle bundle = new Bundle();
				// 文件ID
	bundle.putLong("fileId", baseObject.getLong("fileId"));
	msg.setData(bundle);

	Bundle bundle = msg.getData();
	Long l = bundle.getLong("fileId");

	配合使用

	baseObject.getLong("fileId")  如果json对象中的fileId字段不存在  这是会抛异常org.json.JSONException: No value for fileId
	这时可以用baseObject.optLong("fileId")来获取，如果json对象中的fileId字段不存在自动返回0，如果是字符串自动返回null;
	也可以用baseObject.isNull("fileId")判断json对象中的fileId字段是否存在
31、Collections.reverse(), list集合顺序颠倒
			按时间排序
			Collections.sort(list, new Comparator<MyCourse>() {
				@Override
				public int compare(MyCourse lhs, MyCourse rhs) {
					Date date1 = getTime(lhs.recruitSTime);
					Date date2 = getTime(rhs.recruitSTime);
					// 对日期字段进行升序，如果欲降序可采用after方法
					if (date1.before(date2)) {
						return 1;
					}
					return -1;
				}
			});

32、studyLineView.postInvalidate();可以异步自动更新View

33、/** 第一种方式：去到了拨号界面，但是实际的拨号是由用户点击实现的 */
		Intent intent = new Intent(Intent.ACTION_DIAL);
		Uri data = Uri.parse("tel:" + phoneNum);
		intent.setData(data);
		startActivity(intent);

		/**
		 * 第二种方式：直接拨打了你所输入的号码，所以这种方式对于用户没有直接的提示效果，Android推荐使用第一种方式，如果是第二种的话，
		 * 建议在之前加一个提示，是否拨打号码，然后确定后再拨打
		 */
		// Intent intent = new Intent(Intent.ACTION_CALL);
		// Uri data = Uri.parse("tel:" + "135xxxxxxxx");
		// intent.setData(data);
		// startActivity(intent);



34、反射的用法，大于20是反射内部类里面的私有属性和方法。Filed  属性
	if (android.os.Build.VERSION.SDK_INT > 20) {
		Field mDelegateField = dp.getClass().getDeclaredField("mDelegate");
		mDelegateField.setAccessible(true);

		Object mDelegateObj = mDelegateField.get(dp);// DatePickerSpinnerDelegate
		Class<?> mDelegateCls = mDelegateObj.getClass();
		Field dayFile = mDelegateCls.getDeclaredField("mDaySpinner");
		dayFile.setAccessible(true);

		Object dayObj = dayFile.get(mDelegateObj);// NumberPicker
		Class<?> dayCls = dayObj.getClass();
		Method dayMethod = dayCls.getMethod("setVisibility", int.class);
		dayMethod.invoke(dayObj, View.GONE);
	} else {
		Field daySpinner = dp.getClass().getDeclaredField("mDaySpinner");
		daySpinner.setAccessible(true);
		((View) daySpinner.get(dp)).setVisibility(View.GONE);
	}
35、利用java反射机制，使用android系统的内部类成员函数

	Context mmsCtx = createPackageContext("com.android.lockscreen", Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
	// android.widget.DatePicker$DatePickerSpinnerDelegate 内部类
	Class<?> maClass = Class.forName("com.android.lockscreen.LockScreenActivity", true, mmsCtx.getClassLoader());

	Object maObject = maClass.newInstance();
	Field f_mPm = maClass.getDeclaredField("TAG");
	f_mPm.setAccessible(true);
    Log.i(LOG_TAG, "___________________________________________obj:"+f_mPm.get(maObject));

　　

	//访问方法
	//访问
		try {
            Context mmsCtx = createPackageContext("com.android.lockscreen",
                    Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
            Class<?> maClass = Class.forName("com.android.lockscreen.LockScreenActivity", true, mmsCtx.getClassLoader());

            Object maObject = maClass.newInstance();
            Field f_mPm = maClass.getDeclaredField("TAG");

            //maClass.getDeclaredMethod("", parameterTypes);
            f_mPm.setAccessible(true);
            Log.i(LOG_TAG, "___________________________________________obj:"+f_mPm.get(maObject));


                Class[] resource = new Class[]{Context.class};
                <span style="color: #ff0000;">Object<span style="background-color: #ffffff;">[]</span></span> resourceObj = new Object[]{mmsCtx};

                Method addsMethod = maClass.getDeclaredMethod("getLockScreenView", resource);
                addsMethod.setAccessible(true);

                View addsResult = (View)addsMethod.invoke(maObject, resourceObj);
                Log.i(LOG_TAG, "___________________________________________addsResult:"+addsResult);

        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

	//定义被访问

	public class LockScreenActivity extends Activity {

    private String TAG = "LockScreenActivity";
    //private LockScreen mScreen = new LockScreen(LockScreenActivity.this);

    private LockScreen getLockScreenView(Context context){

        Log.i(TAG, "_________________________________________context:"+context);
        return new LockScreen(context);
    }

	}

　　

	//获取setting包的的Context
            Context mmsCtx = createPackageContext("com.android.settings",
                    Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
            //使用setting的classloader加载com.android.settings.ManageApplications类
            Class<?> maClass = Class.forName("com.android.settings.ManageApplications", true, mmsCtx.getClassLoader());
            //创建它的一个对象
            Object maObject = maClass.newInstance();

            /*
             * 将私有域mPm赋值。因为mPm在SizeObserver的invokeGetSize中用到了，
             * 却因为没有执行onCreate而没有初始化，所以要在此处初始化。
             */
            Field f_mPm = maClass.getDeclaredField("mPm");
            f_mPm.setAccessible(true);
            f_mPm.set(maObject, mmsCtx.getPackageManager());


37、如下设置后如果textView的能容太多，就会有滚动功能
	tv.setMovementMethod(new ScrollingMovementMethod());
	tv.setMovementMethod(ScrollingMovementMethod
						.getInstance());

38、IllegalArgumentException此异常表明向方法传递了一个不合法或不正确的参数。你看看传值的方法是否参数不正确
	java.lang.IllegalStateException  状态异常, 该异常表示，当前对客户端的响应已经结束，不能在响应已经结束（或说消亡）后再向客户端（实际上是缓冲区）输出任何内容。
	java.lang.SecurityException: 权限拒绝： 开始的意图

	遇到java.util.concurrent.RejectedExecutionException
	目前看来，最主要有2种原因。
	第一：你的线程池ThreadPoolExecutor 显示的shutdown()之后，再向线程池提交任务的时候。 如果你配置的拒绝策略是AbortPolicy的话，这个异常就会抛出来。
	第二：当你设置的任务缓存队列过小的时候，或者说， 你的线程池里面所有的线程都在干活（线程数== maxPoolSize),并且你的任务缓存队列也已经充满了等待的队列， 这个时候，你再向它提交任务，则会抛出这个异常。


40、bitmap 也可以通过Bundle传递的，使用putParacelable就可

41、关于Fragment（XXFragment） not attached to Activity 异常。出现该异常，是因为Fragment的还没有Attach到Activity时，调用了如getResource()等，需要上下文Content的函数。解决方法，就是等将调用的代码写在OnStart（）中,调用前也可以进行一个判断isAdded()。
   关于java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState分析原因：你并不需要系统保存的参数，只要你自己设置的参数能够传递过去，在另外一个Fragment里能够顺利接受就行了，现在android里提供了另外一种形式的提交方式commitAllowingStateLoss()，从名字上就能看出，这种提交是允许状态值丢失的。到此问题得到完美解决，值的传递是你自己控制的。
这里也说一下另外一个问题，bitmap 也可以通过Bundle传递的，使用putParacelable就可以了

42、接口汉字乱码问题string =new String(request.getParameter("string").getBytes("iso8859-1"));

	ResponseBody
	@RequestMapping("getString")
	public void getString(HttpServletRequest request,
			@RequestParam("string") String string) {

		try {
			string =new String(request.getParameter("string").getBytes("iso8859-1"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(string);
	}
42、Math.abs()取绝对值
	Math.ceil(x)返回大于参数x的最小整数,即对浮点数向上取整
43、jit的使用：
	1、安装完成后，进入到要托管的项目根目录，启动Git Bash命令行
	2、输入git  clone  接着将先前记录下来的地址复制到后面，回车
	3、将下载下来的项目文件夹的所有文件及文件夹，包括.git文件夹在内，全部拷贝到你的托管项目的根目录（或者将你的托管项目拷贝到该目录）
	输入cd test(test clone 下的文件名)
	进入到该托管项目的根目录。
	4、输入git add .  将改动的地方添加到版本管理器
	5.输入git  commit -m "更改内容"  提交到本地的版本控制库里，引号里面是你对本次提交的说明信息。
	6最后输入git push -u origin master  将你本地的仓库提交到你的github账号里，
	此时会要求你输入你的github的账号和密码（密码输入时不会再git bash上显示的，只要正确输入按回车就可）
44、objectanimator.offloat 第二个参数
	translationX，translationY平移
	scaleX，scaleY缩放
	rotationX，rotationY旋转
	alpha透明度
	SharedPreferences
45、SharedPreferences获取所有内容
	/** 获取批阅缓存的信息 */
	public Map<String, ?> getAllReadOver() {
		if (context == null) {
			return null;
		}
		return getSharedPreferences(FileKey.READOVER_VALUE.toString()).getAll();
	}

	Map<String, ?> map = LocalCache.getInstance().getAllReadOver();
		if (map != null && map.size() > 0) {
			String param = "";
			for (String key : map.keySet()) {
				param += LocalCache.getInstance().getCache(
						FileKey.READOVER_VALUE, key)
						+ ";";
			}
			hashMap.put("itemParams", param.substring(0, param.length() - 1));// 评语评分-提交内容
		}
46、广播是系统级别的，如果不同的应用注册了同一个广播，当有这个广播发出时，所有的应用都会执行这个广播的动作
	ListView的属性
	 android: transcriptMode属性： 设置列表的 transcriptMode模式，该模式指定列表 添加新的选项的时候，是否自动滑动到底部，显示新的选项。

     disabled：取消transcriptMode模式，默认的

     normal：当接受到数据集合改变的通知，并且仅仅当最后一个选项已经显示在屏幕的时候，自动滑动到底部 。

     alwaysScroll：无论当前列表显示什么选项，列表将会自动滑动到底部显示最新的选项 。

47、// 设置View可以缓存
		// shareView.setDrawingCacheEnabled(true);
		// // 创建二维码的bitmap
		// Bitmap bmp = Bitmap.createBitmap(shareView.getDrawingCache());
		// shareView.setDrawingCacheEnabled(false);
		// if (bmp == null) {
		// showToast("分享失败");
		// return;
		// }
48、服务器可以获取从什么设备调用的接口
	public int checkAgent(HttpServletRequest request) {
		Enumeration<String> em = request.getHeaderNames();
		while (em.hasMoreElements()) {
			String name = (String) em.nextElement();
			String value = request.getHeader(name);
			if ("user-agent".equals(name)) {
				// 网页、ios、
				if (value.contains("Windows") || value.contains("iPhone") || value.contains("Mac")) {
					return 0;
				}
			}
		}
		return 1;
	}
49、判断当前应用程序处于前台还是后台，必须在AndroidManifest.xml中添加<uses-permission android:name="android.permission.GET_TASKS" />权限

	public static boolean isBackground(final Context context) {
		ActivityManager am = (ActivityManager) context
				.getSystemService(Context.ACTIVITY_SERVICE);
		List<RunningTaskInfo> tasks = am.getRunningTasks(1);
		if (!tasks.isEmpty()) {
			ComponentName topActivity = tasks.get(0).topActivity;
			if (!topActivity.getPackageName()
					.equals(context.getPackageName())) {
				return true;
			}
		}
		return false;
	}



	/**
	 *
	 * 检测某ActivityUpdate是否在当前Task的栈顶
	 *
	 */

	public boolean isTopActivy(Context context, String cmdName) {
		ActivityManager manager = (ActivityManager) context
				.getSystemService(Context.ACTIVITY_SERVICE);
		List<RunningTaskInfo> runningTaskInfos = manager.getRunningTasks(1);
		String cmpNameTemp = null;

		if (null != runningTaskInfos) {
			cmpNameTemp = runningTaskInfos.get(0).topActivity.toString();
			Log.e("jam", "cmpname:" + cmpNameTemp);
		}
		if (null == cmpNameTemp)
			return false;
		return cmpNameTemp.equals(cmdName);

	}

50、private void startResultTime() {
		closeResultTime();
		if (timer2 == null) {
			timer2 = new Timer();
		}
		if (timerTask2 == null) {
			timerTask2 = new TimerTask() {
				@Override
				public void run() {
					getProblemLocal(index);
				}
			};
		}
		timer2.schedule(timerTask2, 10 * 1000, 20 * 1000);
	}

	private void closeResultTime() {
		if (timer2 != null) {
			timer2.cancel();
			timer2 = null;
		}
		if (timerTask2 != null) {
			timerTask2.cancel();
			timerTask2 = null;
		}
	}
51、webView的用法
		// 放大缩小按钮
		webView.getSettings().setBuiltInZoomControls(false);
		// 使Webview具有标准视口(如普通桌面浏览器)
		webView.getSettings().setUseWideViewPort(true);
		// 能够执行Javascript脚本
		webView.getSettings().setJavaScriptEnabled(true);
		webView.getSettings().setDefaultTextEncodingName("utf-8");
		// 添加JS交互接口类
		webView.addJavascriptInterface(new AppWebView(), "appWebView");
		// 当前webview中跳转
		webView.setWebViewClient(new WebViewClient());
		webView.setWebChromeClient(new WebChromeClient() {
			// 只有确定按钮的提示框
			@Override
			public boolean onJsAlert(WebView view, String url, String message,
					final JsResult result) {
			};
			// 有确定、取消、忽略
			@Override
			public boolean onJsPrompt(WebView view, String url, String message, String defaultValue,
					JsPromptResult result) {
				// TODO Auto-generated method stub
				return super.onJsPrompt(view, url, message, defaultValue, result);
			}
			// 有确定、取消按钮的提示框
			@Override
			public boolean onJsConfirm(WebView view, String url,
					String message, final JsResult result) {
				new MyAlertDialog.Builder(CreditCourseActivity.this)
						// .setTitle(url)
						.setMessage(message)
						.setPositiveButton(R.string.check,
								new AlertDialog.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int which) {
										result.confirm();
									}
								})
						.setNegativeButton(R.string.cancel,
								new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int which) {
										result.cancel();
									}
								}).setCancelable(false).create().show();
				return true;
			};

		});
		if ((keyCode == KeyEvent.KEYCODE_BACK) && webView.canGoBack()) {
			webView.goBack(); // goBack()表示返回WebView的上一页面
			return true;
		}


		/** 清除cookie */
	private void removeAllCookie() {
		CookieSyncManager cookieSyncManager = CookieSyncManager
				.createInstance(this);
		CookieManager cookieManager = CookieManager.getInstance();
		cookieManager.setAcceptCookie(true);
		cookieManager.removeSessionCookie();
		cookieManager.removeAllCookie();
		cookieSyncManager.sync();
	}
52、  * 判断手机是否有root权限
     */
    private static boolean hasRootPerssion(){
        PrintWriter PrintWriter = null;
        Process process = null;
        try {
            process = Runtime.getRuntime().exec("su");
            PrintWriter = new PrintWriter(process.getOutputStream());
            PrintWriter.flush();
            PrintWriter.close();
            int value = process.waitFor();
            return returnResult(value);
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
            if(process!=null){
                process.destroy();
            }
        }
        return false;
    }
53、//服务器判断请求数据的设备类型
	public int checkAgent(HttpServletRequest request) {
		Enumeration<String> em = request.getHeaderNames();
		while (em.hasMoreElements()) {
			String name = (String) em.nextElement();
			String value = request.getHeader(name);
			if ("user-agent".equals(name)) {
				// 网页、ios、
				if (value.contains("Windows") || value.contains("iPhone") || value.contains("Mac")) {
					return 0;
				}
			}
		}
		return 1;
	}

	53.1. 获得客户机信息
    getRequestURL方法返回客户端发出请求时的完整URL。
    getRequestURI方法返回请求行中的资源名部分。
    getQueryString 方法返回请求行中的参数部分。
    getRemoteAddr方法返回发出请求的客户机的IP地址
    getRemoteHost方法返回发出请求的客户机的完整主机名
    getRemotePort方法返回客户机所使用的网络端口号
    getLocalAddr方法返回WEB服务器的IP地址。
    getLocalName方法返回WEB服务器的主机名
    getMethod得到客户机请求方式

 	53.2.获得客户机请求头
    getHeader(string name)方法
    getHeaders(String name)方法
    getHeaderNames方法

 	53.3. 获得客户机请求参数(客户端提交的数据)
    getParameter(name)方法
    getParameterValues（String name）方法
    getParameterNames方法
    getParameterMap方法
54、获取系统语言context.getResources().getConfiguration().locale.getLanguage()
	返回zh、en
55、数组和结合互转：
	集合转成数组
	List<String> list = new ArrayList<String>();
	list.add("a1");
	list.add("a2");
	String[] toBeStored = list.toArray(new String[list.size()]);
	for(String s : toBeStored) {
     	System.out.println(s);
	}
	数组转成集合
	String[] arr = new String[] {"1", "2"};
    List list = Arrays.asList(arr);
56、 BitmapFactory.Options这个类，有一个字段叫做 inJustDecodeBounds 。SDK中对这个成员的说明是这样的：
	If set to true, the decoder will return null (no bitmap), but the out⋯
	也就是说，如果我们把它设为true，那么BitmapFactory.decodeFile(String path, Options opt)并不会真的返回一个Bitmap给你，它仅仅会把它的宽，高取回来给你，这样就不会占用太多的内存，也就不会那么频繁的发生OOM了。
	示例代码如下：
	BitmapFactory.Options options = new BitmapFactory.Options();
	options.inJustDecodeBounds = true;
	Bitmap bmp = BitmapFactory.decodeFile(path, options);/* 这里返回的bmp是null */
	这段代码之后，options.outWidth 和 options.outHeight就是我们想要的宽和高了。

	比如我们需要在图片不变形的前提下得到宽度为200的缩略图。
	那么我们需要先计算一下缩放之后，图片的高度是多少 ,代码如下
	int height = options.outHeight * 200 / options.outWidth;
	options.outWidth = 200；
	options.outHeight = height;
	options.inJustDecodeBounds = false;
	Bitmap bmp = BitmapFactory.decodeFile(path, options);
	image.setImageBitmap(bmp);

	这样虽然我们可以得到我们期望大小的ImageView
	但是在执行BitmapFactory.decodeFile(path, options);时，并没有节约内存。要想节约内存，还需要用到BitmapFactory.Options这个类里的  inSampleSize  这个成员变量。
	我们可以根据图片实际的宽高和我们期望的宽高来计算得到这个值。
	options.inSampleSize = options.outWidth / 200; /*图片长宽方向缩小倍数*/
	另外，为了节约内存我们还可以使用下面的几个字段：
	options.inDither=false;    /*不进行图片抖动处理*/
	options.inPreferredConfig=null;  /*设置让解码器以最佳方式解码*/
	/* 下面两个字段需要组合使用 */
	options.inPurgeable = true;
	options.inInputShareable = true;

	// 允许可清除
	如果 inPurgeable 设为True的话表示使用BitmapFactory创建的Bitmap用于存储Pixel的内存空间在系统内存不足时可以被回收，
	在应用需要再次访问Bitmap的Pixel时（如绘制Bitmap或是调用getPixel），系统会再次调用BitmapFactory decoder重新生成Bitmap的Pixel数组.
	为了能够重新解码图像，bitmap要能够访问存储Bitmap的原始数据.在inPurgeable为false时表示创建的Bitmap的Pixel内存空间不能被回收，
	这样BitmapFactory在不停decodeByteArray创建新的Bitmap对象，不同设备的内存不同，因此能够同时创建的Bitmap个数可能有所不同，
	200个bitmap足以使大部分的设备重新OutOfMemory错误.当isPurgable设为true时，系统中内存不足时，可以回收部分Bitmap占据的内存空间，
	这时一般不会出现OutOfMemory 错误.
57、static boolean isMain() {
    return Looper.getMainLooper().getThread() == Thread.currentThread();
  }

58、关于画笔的设置
	Paint即画笔，在绘图过程中起到了极其重要的作用，画笔主要保存了颜色，
         样式等绘制信息，指定了如何绘制文本和图形，画笔对象有很多设置方法，
         大体上可以分为两类，一类与图形绘制相关，一类与文本绘制相关。
     	 <strong><span style="color: #800000; font-size: small;">1.图形绘制  </span></strong>
        1、setARGB(int a,int r,int g,int b);
         	设置绘制的颜色，a代表透明度，r，g，b代表颜色值。
        2、 setAlpha(int a);
         	设置绘制图形的透明度。
        3、 setColor(int color);
         	设置绘制的颜色，使用颜色值来表示，该颜色值包括透明度和RGB颜色。
       	4、setAntiAlias(boolean aa);
         	设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢。
        5、   setDither(boolean dither);
          	 设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰
        6、  setFilterBitmap(boolean filter);
           	如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作，加快显示速度，本设置项依赖于dither和xfermode的设置
        7、  setMaskFilter(MaskFilter maskfilter);
           	设置MaskFilter，可以用不同的MaskFilter实现滤镜的效果，如滤化，立体等
        8、  setColorFilter(ColorFilter colorfilter);
           	设置颜色过滤器，可以在绘制颜色时实现不用颜色的变换效果
        9、  setPathEffect(PathEffect effect);
           	设置绘制路径的效果，如点画线等
        10、   setShader(Shader shader);
          	 设置图像效果，使用Shader可以绘制出各种渐变效果
        11、   setShadowLayer(float radius ,float dx,float dy,int color);
           	在图形下面设置阴影层，产生阴影效果，radius为阴影的角度，dx和dy为阴影在x轴和y轴上的距离，color为阴影的颜色
        12、   setStyle(Paint.Style style);
           	设置画笔的样式，为FILL，FILL_OR_STROKE，或STROKE
        13、   setStrokeCap(Paint.Cap cap);
           	当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的图形样式，如圆形样式    Cap.ROUND,或方形样式Cap.SQUARE
        14、   setSrokeJoin(Paint.Join join);
           	设置绘制时各图形的结合方式，如平滑效果等
        15、   setStrokeWidth(float width);
           	当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的粗细度
        16、   setXfermode(Xfermode xfermode);
           	设置图形重叠时的处理方式，如合并，取交集或并集，经常用来制作橡皮的擦除效果
          <span style="color: #800000; font-size: small;"><strong> 2.文本绘制  </strong></span>
        17、   setFakeBoldText(boolean fakeBoldText);
           	模拟实现粗体文字，设置在小字体上效果会非常差
        18、   setSubpixelText(boolean subpixelText);
           	设置该项为true，将有助于文本在LCD屏幕上的显示效果
        19、   setTextAlign(Paint.Align align);
           	设置绘制文字的对齐方向
      	20、   setTextScaleX(float scaleX);
           	设置绘制文字x轴的缩放比例，可以实现文字的拉伸的效果
        21、   setTextSize(float textSize);
          	 设置绘制文字的字号大小
        22、   setTextSkewX(float skewX);
           	设置斜体文字，skewX为倾斜弧度
        23、   setTypeface(Typeface typeface);
           	设置Typeface对象，即字体风格，包括粗体，斜体以及衬线体，非衬线体等
        24、   setUnderlineText(boolean underlineText);
           	设置带有下划线的文字效果
        25、   setStrikeThruText(boolean strikeThruText);
           	设置带有删除线的效果
59、缓存相关
	1、通过Context.getExternalFilesDir()方法可以获取到 SDCard/Android/data/你的应用的包名/files/ 目录，一般放一些长时间保存的数据
	2、通过Context.getExternalCacheDir()方法可以获取到 SDCard/Android/data/你的应用包名/cache/目录，一般存放临时缓存数据
60、1、只需在根节点设置Android:clipChildren为false即可，默认为true，注意：一定是在布局文件的根节点设置，否则不起作用
    2、可以通过android:layout_gravity控制超出的部分如何显示
    3、android:clipChildren的意思：是否限制子View在其范围内，我们将其值设置为false后那么当子控件的高度高于父控件时也会完全显示,而不会被压缩
61、 /**
        * 获取状态栏的高度
        *
        * @return
        */
       public int getStatusBarHeight() {
           int result = 0;
           int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
           if (resourceId > 0) {
               result = getResources().getDimensionPixelSize(resourceId);
           }
           return result;
       }
	   
	   
	   
62、/**
     * 弹起软键盘
     *
     * @param editText
     */
    public void openKeyBoard(final EditText editText) {
        editText.setFocusable(true);
        editText.setFocusableInTouchMode(true);
        editText.requestFocus();
        AndroidSchedulers.mainThread().createWorker().schedule(new Runnable() {
            @Override
            public void run() {
                InputMethodManager imm = (InputMethodManager) editText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.showSoftInput(editText, 0);
            }
        }, 200, TimeUnit.MILLISECONDS);
    }


63、OOM是常见的java错误，OOM主要有：
   1.OOM fo heapjava.lang:OutOfMemoryError: Java heap space，此OOM是由于JVM中heap的最大值不满足需要，将设置heap的最大值调高即可。
   2.OOM for Perm：java.lang:OutOfMemoryError: Java perm space，此OOM是由于JVM中perm的最大值不满足需要，将设置perm的最大值调高即可，参数样例为：-XX:MaxPermSize=512M
   3.OOM for GC=>例如：java.lang:OutOfMemoryError: GC overhead limit exceeded，此OOM是由于JVM在GC时，对象过多，导致内存溢出，建议调整GC的策略
   4.OOM for native thread created:java.lang.OutOfMemoryError: unable to create new native thread,此OOM是由于进程剩余的空间不足，导致创建进程失败
   5.OOM for allocate huge array:Exception in thread "main": java.lang.OutOfMemoryError: Requested array size exceeds VM limit，此类信息表明应用程序（或者被应用程序调用的APIs）试图分配一个大于堆大小的数组
   6.OOM for small swap:Exception in thread "main": java.lang.OutOfMemoryError: request <size> bytes for <reason>. Out of swap space?,抛出这类错误，是由于从native堆中分配内存失败，并且堆内存可能接近耗尽
   7.OutOfMemoryError thrown while trying to throw OutOfMemoryError; no stack trace available,抛出这类错误，一般是由于方法重复调用、死循环引起，直至内存耗尽

64、 zipAlignEnabled true //Zipalign优化
     minifyEnabled true  //混淆
     shrinkResources false // 移除无用的resource文件(混淆规则配置了-dontshrink，导致这里改成true无效，安卓默认会删除一些无用的包，可以用dontshrink来禁止这种行为。)
     buildConfigField "boolean", "ISDEBUG", "false"
     proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'


65、moveTo：设置路径起始点
   lineTo：添加直线到路径
   arcTo：添加弧线到路径
   rMoveTo：设置路径起始点，参数相对于当前绘制点
   rLineTo：添加直线到路径，参数相对于当前绘制点
   rArcTo：添加弧线到路径，参数相对于当前绘制点
   close：闭合路径
   addArc：添加一个圆弧到路径
   addCircle：添加一个圆到路径
   addOval：添加一个椭圆到路径
   addRect：添加一个矩形到路径
   reset：重置路径
   offset：对路径进行偏移
   op：两个路径组合操作

   arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)构建一个弧线到Path
   left,top,right,bottom：因为是弧线所以要构建一个矩形区域
   left：矩形left的x坐标
   top：矩形top的y坐标
   right：矩形right的x坐标
   bottom：矩形bottom的y坐标
   startAngle：圆弧起始角度，单位为度 （0~360）
   sweepAngle：圆弧扫过的角度，顺时针方向，单位为度 （0~360）
   forceMoveTo：false代表弧线起点与上个绘制的最后一个点连接，true代表不连接。

66、有四种：第一种AbortPolicy:不执行新任务，直接抛出异常，提示线程池已满

                第二种DisCardPolicy:不执行新任务，也不抛出异常

                第三种DisCardOldSetPolicy:将消息队列中的第一个任务替换为当前新进来的任务执行

                第四种CallerRunsPolicy:直接调用execute来执行当前任务

   五，四种常见的线程池：

   CachedThreadPool:可缓存的线程池，该线程池中没有核心线程，非核心线程的数量为Integer.max_value，就是无限大，当有需要时创建线程来执行任务，没有需要时回收线程，适用于耗时少，任务量大的情况。

   SecudleThreadPool:周期性执行任务的线程池，按照某种特定的计划执行线程中的任务，有核心线程，但也有非核心线程，非核心线程的大小也为无限大。适用于执行周期性的任务。

   SingleThreadPool:只有一条线程来执行任务，适用于有顺序的任务的应用场景。

   FixedThreadPool:定长的线程池，有核心线程，核心线程的即为最大的线程数量，没有非核心线程


67、final Dispatcher dispatcher;  //重要：分发器,分发执行和关闭由request构成的Call
       final Proxy proxy;  //代理
       final List<Protocol> protocols; //协议
       final List<ConnectionSpec> connectionSpecs; //传输层版本和连接协议
       final List<Interceptor> interceptors; //重要：拦截器
       final List<Interceptor> networkInterceptors; //网络拦截器
       final ProxySelector proxySelector; //代理选择
       final CookieJar cookieJar; //cookie
       final Cache cache; //缓存
       final InternalCache internalCache;  //内部缓存
       final SocketFactory socketFactory;  //socket 工厂
       final SSLSocketFactory sslSocketFactory; //安全套接层socket 工厂，用于HTTPS
       final CertificateChainCleaner certificateChainCleaner; // 验证确认响应证书 适用 HTTPS 请求连接的主机名。
       final HostnameVerifier hostnameVerifier;    //  主机名字确认
       final CertificatePinner certificatePinner;  //  证书链
       final Authenticator proxyAuthenticator;     //代理身份验证
       final Authenticator authenticator;      // 本地身份验证
       final ConnectionPool connectionPool;    //连接池,复用连接
       final Dns dns;  //域名
       final boolean followSslRedirects;  //安全套接层重定向
       final boolean followRedirects;  //本地重定向
       final boolean retryOnConnectionFailure; //重试连接失败
       final int connectTimeout;    //连接超时
       final int readTimeout; //read 超时
       final int writeTimeout; //write 超时
       pingInterval :这个就和WebSocket有关了。为了保持长连接，我们必须间隔一段时间发送一个ping指令进行保活；


       //最大的请求数量
         private int maxRequests = 64;
         //每个主机的请求数量，默认在摸个主机上同时请求5个
         private int maxRequestsPerHost = 5;
         private @Nullable Runnable idleCallback;

         /** Executes calls. Created lazily. */
        //执行异步call时的线程池，就在这儿
         private @Nullable ExecutorService executorService;

         /** Ready async calls in the order they'll be run. */
        //即将被执行的异步call队列
         private final Deque<AsyncCall> readyAsyncCalls = new ArrayDeque<>();

         /** Running asynchronous calls. Includes canceled calls that haven't finished yet. */
        //正在运行的异步call，包括被取消的还没有完成的
         private final Deque<AsyncCall> runningAsyncCalls = new ArrayDeque<>();

         /** Running synchronous calls. Includes canceled calls that haven't finished yet. */
        //正在运行的同步call。包括被取消的还没有完成的
         private final Deque<RealCall> runningSyncCalls = new ArrayDeque<>();
        //可以执行自定义线程池，传进来
         public Dispatcher(ExecutorService executorService) {
           this.executorService = executorService;
         }


（1）在配置 OkHttpClient时设置的interceptors；
（2）负责失败重试以及重定向的 RetryAndFollowUpInterceptor；
（3）负责把用户构造的请求转换为发送到服务器的请求、把服务器返回的响应转换为用户友好的响应的BridgeInterceptor；
（4）负责读取缓存直接返回、更新缓存的 CacheInterceptor
（5）负责和服务器建立连接的ConnectInterceptor；
（6）配置 OkHttpClient 时设置的 networkInterceptors；
（7）负责向服务器发送请求数据、从服务器读取响应数据的 CallServerInterceptor


Android OkHttp（三）源码解析:https://blog.csdn.net/zxw136511485/article/details/52872724 （这是我第一篇看的okhttp的源码解析，根据这篇文章和自己查看okhtttp 源码，看okhttp内部，这篇文章大概讲清楚okhttp 内部构造，虽然有些语言表达上的错误，这篇也是针对okhttp的.建议可以先看这篇，先了解大概）

okhttp源码解析：https://blog.csdn.net/json_it/article/details/78404010 （这是第二篇，也是最近在看的一篇，大神分析的比较全，也比较准确，详细解析的okhttp3）

OkHttp3源码分析[综述]:https://blog.csdn.net/json_it/article/details/78404010 (这篇是将源码分析，拆成了5个部分，分析也很很好，适合看)

Android okhttp3 创建Socket的底层实现追踪 ：https://blog.csdn.net/hello2mao/article/details/53159151 （这篇描述了OKhttp3 socket底层的实现）
OkHttp3源码和设计模式：

https://www.imooc.com/article/24025?block_id=tuijian_wz （这篇从设计模式的角度分析OKhttp3）

OkHttp3对RealCall的注释及上篇是Dispatcher

https://blog.csdn.net/dingding_android/article/details/51942000
————————————————
版权声明：本文为CSDN博主「茶卡y」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/u012881042/article/details/79759203